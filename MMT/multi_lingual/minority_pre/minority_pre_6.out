/var/spool/slurm/slurmd/job3570096/slurm_script: line 11: /home/xiaoq/miniconda3/etc/profile.d/conda.sh: No such file or directory
2023-08-29 21:07:11 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:07:13 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': 'simple', 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 222, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': None, 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': 1024, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 1024, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 1, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [2], 'lr': [3e-05], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'minority_pre_2to2/0.6/', 'restore_file': 'examples/multilingual/mbart.cc25.v2/model.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': True, 'reset_lr_scheduler': False, 'reset_meters': True, 'reset_optimizer': True, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 50000, 'keep_interval_updates': 10, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='mbart_large', activation_fn='gelu', adam_betas='(0.9, 0.98)', adam_eps=1e-06, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='mbart_large', attention_dropout=0.1, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=0.0, combine_valid_subsets=None, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_attention_heads=16, decoder_embed_dim=1024, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1024, decoder_langtok=True, decoder_layers=12, decoder_learned_pos=True, decoder_normalize_before=True, decoder_output_dim=1024, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, dropout=0.3, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_attention_heads=16, encoder_embed_dim=1024, encoder_embed_path=None, encoder_ffn_embed_dim=4096, encoder_langtok='src', encoder_layers=12, encoder_learned_pos=True, encoder_normalize_before=True, eos=2, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, final_prune_time=0.8, find_unused_parameters=False, finetune_from_model=None, fix=True, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, growth=None, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, imp_iters=1, initial_prune_time=0.1, initialization_checkpoint=None, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=10, keep_interval_updates_pattern=-1, keep_last_epochs=-1, label_smoothing=0.2, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], layernorm_embedding=True, left_pad_source='True', left_pad_target='False', load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format='simple', log_interval=100, lr=[3e-05], lr_scheduler='inverse_sqrt', max_epoch=0, max_source_positions=1024, max_target_positions=1024, max_tokens=1024, max_tokens_valid=1024, max_update=1, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, noembed=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', pooler_activation_fn='tanh', pooler_dropout=0.0, profile=False, prune=None, prune_rate=0.5, quantization_config_path=None, redistribution=None, relu_dropout=0.0, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=True, reset_logging=False, reset_lr_scheduler=False, reset_meters=True, reset_optimizer=True, restore_file='examples/multilingual/mbart.cc25.v2/model.pt', sampling_method='temperature', sampling_temperature=1.5, sampling_weights=None, sampling_weights_from_file=None, save_dir='minority_pre_2to2/0.6/', save_interval=1, save_interval_updates=50000, scoring='bleu', seed=222, sentence_avg=False, shard_id=0, share_all_embeddings=True, share_decoder_input_output_embed=True, simul_type=None, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang=None, sparse=True, sparse_init='one_shot_gm_cpu', sparse_mode='fix', sparsity=0.6, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_dict=None, target_lang=None, task='translation_multi_simple_epoch', tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[2], update_frequency=1500, update_ordered_indices_seed=False, upsample_primary=1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_init_lr=-1, warmup_updates=1, weight_decay=0.0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'task': Namespace(_name='translation_multi_simple_epoch', activation_fn='gelu', adam_betas='(0.9, 0.98)', adam_eps=1e-06, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='mbart_large', attention_dropout=0.1, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=0.0, combine_valid_subsets=None, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_attention_heads=16, decoder_embed_dim=1024, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1024, decoder_langtok=True, decoder_layers=12, decoder_learned_pos=True, decoder_normalize_before=True, decoder_output_dim=1024, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, dropout=0.3, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_attention_heads=16, encoder_embed_dim=1024, encoder_embed_path=None, encoder_ffn_embed_dim=4096, encoder_langtok='src', encoder_layers=12, encoder_learned_pos=True, encoder_normalize_before=True, eos=2, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, final_prune_time=0.8, find_unused_parameters=False, finetune_from_model=None, fix=True, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, growth=None, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, imp_iters=1, initial_prune_time=0.1, initialization_checkpoint=None, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=10, keep_interval_updates_pattern=-1, keep_last_epochs=-1, label_smoothing=0.2, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], layernorm_embedding=True, left_pad_source='True', left_pad_target='False', load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format='simple', log_interval=100, lr=[3e-05], lr_scheduler='inverse_sqrt', max_epoch=0, max_source_positions=1024, max_target_positions=1024, max_tokens=1024, max_tokens_valid=1024, max_update=1, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, noembed=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', pooler_activation_fn='tanh', pooler_dropout=0.0, profile=False, prune=None, prune_rate=0.5, quantization_config_path=None, redistribution=None, relu_dropout=0.0, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=True, reset_logging=False, reset_lr_scheduler=False, reset_meters=True, reset_optimizer=True, restore_file='examples/multilingual/mbart.cc25.v2/model.pt', sampling_method='temperature', sampling_temperature=1.5, sampling_weights=None, sampling_weights_from_file=None, save_dir='minority_pre_2to2/0.6/', save_interval=1, save_interval_updates=50000, scoring='bleu', seed=222, sentence_avg=False, shard_id=0, share_all_embeddings=True, share_decoder_input_output_embed=True, simul_type=None, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang=None, sparse=True, sparse_init='one_shot_gm_cpu', sparse_mode='fix', sparsity=0.6, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_dict=None, target_lang=None, task='translation_multi_simple_epoch', tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[2], update_frequency=1500, update_ordered_indices_seed=False, upsample_primary=1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_init_lr=-1, warmup_updates=1, weight_decay=0.0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'label_smoothed_cross_entropy', 'label_smoothing': 0.2, 'report_accuracy': False, 'ignore_prefix_size': 0, 'sentence_avg': False}, 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9, 0.98)', 'adam_eps': 1e-06, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [3e-05]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 1, 'warmup_init_lr': -1.0, 'lr': [3e-05]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': True, 'noembed': False, 'fix': True, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': 'one_shot_gm_cpu', 'redistribution': None, 'sparsity': 0.6, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}, 'simul_type': None}
2023-08-29 21:07:13 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:07:14 | INFO | fairseq.data.multilingual.multilingual_data_manager | [my] dictionary: 250026 types
2023-08-29 21:07:15 | INFO | fairseq.data.multilingual.multilingual_data_manager | [my] dictionary: 250026 types
2023-08-29 21:07:32 | INFO | fairseq_cli.train | BARTModel(
  (encoder): TransformerEncoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(250026, 1024, padding_idx=1)
    (embed_positions): LearnedPositionalEmbedding(1026, 1024, padding_idx=1)
    (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (layers): ModuleList(
      (0): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (6): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (7): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (8): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (9): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (10): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (11): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(250026, 1024, padding_idx=1)
    (embed_positions): LearnedPositionalEmbedding(1026, 1024, padding_idx=1)
    (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (layers): ModuleList(
      (0): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (6): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (7): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (8): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (9): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (10): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (11): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=1024, out_features=250026, bias=False)
  )
  (classification_heads): ModuleDict()
)
2023-08-29 21:07:32 | INFO | fairseq_cli.train | task: TranslationMultiSimpleEpochTask
2023-08-29 21:07:32 | INFO | fairseq_cli.train | model: BARTModel
2023-08-29 21:07:32 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropyCriterion
2023-08-29 21:07:32 | INFO | fairseq_cli.train | num. shared model params: 761,956,352 (num. trained: 761,956,352)
2023-08-29 21:07:32 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-08-29 21:07:32 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for valid epoch=1/None
2023-08-29 21:07:32 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=32319.47265625Mb; avail=477701.9609375Mb
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | [valid] num of shards: {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1}
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:en-my
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:en-gu
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:gu-en
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:my-en
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-my src_langtok: 250002; tgt_langtok: 250001
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-my.en
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-my.my
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid en-my 2000 examples
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-gu src_langtok: 250002; tgt_langtok: 250025
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-gu.en
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-gu.gu
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid en-gu 2000 examples
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:gu-en src_langtok: 250025; tgt_langtok: 250002
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-gu.gu
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-gu.en
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid gu-en 2000 examples
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:my-en src_langtok: 250001; tgt_langtok: 250002
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-my.my
2023-08-29 21:07:32 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-my.en
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid my-en 2000 examples
2023-08-29 21:07:36 | INFO | fairseq.trainer | detected shared parameter: encoder.embed_tokens.weight <- decoder.embed_tokens.weight
2023-08-29 21:07:36 | INFO | fairseq.trainer | detected shared parameter: encoder.embed_tokens.weight <- decoder.output_projection.weight
2023-08-29 21:07:36 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-08-29 21:07:36 | INFO | fairseq.utils | rank   0: capabilities =  8.0  ; total memory = 39.438 GB ; name = NVIDIA A100-SXM4-40GB                   
2023-08-29 21:07:36 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-08-29 21:07:36 | INFO | fairseq_cli.train | training on 1 devices (GPUs/TPUs)
2023-08-29 21:07:36 | INFO | fairseq_cli.train | max tokens per device = 1024 and max sentences per device = None
2023-08-29 21:07:36 | INFO | fairseq.trainer | Preparing to load checkpoint examples/multilingual/mbart.cc25.v2/model.pt
2023-08-29 21:07:41 | INFO | fairseq.trainer | NOTE: your device may support faster training with --fp16 or --amp
2023-08-29 21:07:41 | INFO | fairseq.trainer | Loaded checkpoint examples/multilingual/mbart.cc25.v2/model.pt (epoch 142 @ 0 updates)
******************************************
resetting dataloader
******************************************
2023-08-29 21:07:41 | INFO | fairseq.trainer | loading train data for epoch 1
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for train epoch=1/None
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=42419.99609375Mb; avail=467426.453125Mb
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | [train] num of shards: {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1}
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:en-my
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:en-gu
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:gu-en
split_num_shards_dict {'main:en-my': 1, 'main:en-gu': 1, 'main:gu-en': 1, 'main:my-en': 1} main:my-en
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-my src_langtok: 250002; tgt_langtok: 250001
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 24,594 examples from: examples/multilingual/multidata/train.en-my.en
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 24,594 examples from: examples/multilingual/multidata/train.en-my.my
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train en-my 24594 examples
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-gu src_langtok: 250002; tgt_langtok: 250025
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 318,306 examples from: examples/multilingual/multidata/train.en-gu.en
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 318,306 examples from: examples/multilingual/multidata/train.en-gu.gu
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train en-gu 318306 examples
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:gu-en src_langtok: 250025; tgt_langtok: 250002
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 318,306 examples from: examples/multilingual/multidata/train.en-gu.gu
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 318,306 examples from: examples/multilingual/multidata/train.en-gu.en
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train gu-en 318306 examples
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:my-en src_langtok: 250001; tgt_langtok: 250002
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 24,594 examples from: examples/multilingual/multidata/train.en-my.my
2023-08-29 21:07:41 | INFO | fairseq.data.data_utils | loaded 24,594 examples from: examples/multilingual/multidata/train.en-my.en
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train my-en 24594 examples
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | estimated total data sizes of all shards used in sampling ratios: [('main:en-my', 24594), ('main:en-gu', 318306), ('main:gu-en', 318306), ('main:my-en', 24594)]. Note that if the data a shard has not been loaded yet, use the max known data size to approximate
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampling_method | selected sampler: temperature
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.multilingual_data_manager | | Upsample ratios: [('main:en-my', 0.10874796162660874), ('main:en-gu', 0.599466469301992), ('main:gu-en', 0.599466469301992), ('main:my-en', 0.10874796162660874)]
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Raw sizes: {'main:en-my': 24594, 'main:en-gu': 318306, 'main:gu-en': 318306, 'main:my-en': 24594}; raw total size: 685800
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Resampled sizes: {'main:en-my': 57743, 'main:en-gu': 318307, 'main:gu-en': 318305, 'main:my-en': 57743}; resampled total size: 752098
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Upsampling ratios: {'main:en-my': 0.10874796162660874, 'main:en-gu': 0.599466469301992, 'main:gu-en': 0.599466469301992, 'main:my-en': 0.10874796162660874}
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] virtual dataset established time: 0:00:00.019579
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36283.375Mb; avail=473561.5625Mb
2023-08-29 21:07:41 | INFO | fairseq.data.multilingual.sampled_multi_dataset | sizes() calling time: 0:00:00.019643
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler order indices time: 0:00:00.137482
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=35794.14453125Mb; avail=474050.79296875Mb
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler filter_by_size time: 0:00:00.004831
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=35794.14453125Mb; avail=474050.79296875Mb
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler batch_by_size time: 0:00:00.048548
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] per epoch batch_sampler set-up time: 0:00:00.191576
2023-08-29 21:07:41 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=35794.22265625Mb; avail=474050.69140625Mb
2023-08-29 21:07:41 | INFO | fairseq.data.iterators | grouped total_num_itrs = 5489
2023-08-29 21:07:41 | INFO | fairseq.trainer | begin training epoch 1
2023-08-29 21:07:41 | INFO | fairseq_cli.train | '**********Start pruning the model**********************'
update  2
Growth mode: None not supported!
Supported modes are: ['random', 'momentum', 'momentum_neuron', 'gradient']
Removing in_proj_weight
Removed 12 layers.
Removing out_proj_weight
Removed 12 layers.
Removing fc1_weight
Removed 12 layers.
Removing fc2_weight
Removed 12 layers.
lm_head.dense.weight
Removed 0 layers.
initialize by one_shot_gm
sparsity of layer encoder.embed_tokens.weight with tensor torch.Size([250026, 1024]) is 0.659311591750708
sparsity of layer encoder.embed_positions.weight with tensor torch.Size([1026, 1024]) is 0.39584475511695905
sparsity of layer encoder.layers.0.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.6526298522949219
sparsity of layer encoder.layers.0.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7102899551391602
sparsity of layer encoder.layers.0.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.6279144287109375
sparsity of layer encoder.layers.0.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7593708038330078
sparsity of layer encoder.layers.0.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5646712779998779
sparsity of layer encoder.layers.0.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6963248252868652
sparsity of layer encoder.layers.1.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.582554817199707
sparsity of layer encoder.layers.1.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7614049911499023
sparsity of layer encoder.layers.1.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5514888763427734
sparsity of layer encoder.layers.1.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7341604232788086
sparsity of layer encoder.layers.1.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5485670566558838
sparsity of layer encoder.layers.1.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6712555885314941
sparsity of layer encoder.layers.2.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5566225051879883
sparsity of layer encoder.layers.2.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7200927734375
sparsity of layer encoder.layers.2.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5426998138427734
sparsity of layer encoder.layers.2.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7243270874023438
sparsity of layer encoder.layers.2.fc1.weight with tensor torch.Size([4096, 1024]) is 0.535057783126831
sparsity of layer encoder.layers.2.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6612658500671387
sparsity of layer encoder.layers.3.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5577993392944336
sparsity of layer encoder.layers.3.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6413135528564453
sparsity of layer encoder.layers.3.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5483827590942383
sparsity of layer encoder.layers.3.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6600618362426758
sparsity of layer encoder.layers.3.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5243239402770996
sparsity of layer encoder.layers.3.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6498644351959229
sparsity of layer encoder.layers.4.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5281839370727539
sparsity of layer encoder.layers.4.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6102113723754883
sparsity of layer encoder.layers.4.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5299167633056641
sparsity of layer encoder.layers.4.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6417179107666016
sparsity of layer encoder.layers.4.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5137622356414795
sparsity of layer encoder.layers.4.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6325476169586182
sparsity of layer encoder.layers.5.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.45995616912841797
sparsity of layer encoder.layers.5.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5993824005126953
sparsity of layer encoder.layers.5.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.47707366943359375
sparsity of layer encoder.layers.5.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6572237014770508
sparsity of layer encoder.layers.5.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5019915103912354
sparsity of layer encoder.layers.5.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5893757343292236
sparsity of layer encoder.layers.6.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.46369171142578125
sparsity of layer encoder.layers.6.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5502481460571289
sparsity of layer encoder.layers.6.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.4829254150390625
sparsity of layer encoder.layers.6.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6100044250488281
sparsity of layer encoder.layers.6.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5057196617126465
sparsity of layer encoder.layers.6.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5661911964416504
sparsity of layer encoder.layers.7.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.4961977005004883
sparsity of layer encoder.layers.7.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5097856521606445
sparsity of layer encoder.layers.7.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5095424652099609
sparsity of layer encoder.layers.7.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5565261840820312
sparsity of layer encoder.layers.7.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5271806716918945
sparsity of layer encoder.layers.7.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5418307781219482
sparsity of layer encoder.layers.8.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.539393424987793
sparsity of layer encoder.layers.8.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5069427490234375
sparsity of layer encoder.layers.8.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5469808578491211
sparsity of layer encoder.layers.8.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5275745391845703
sparsity of layer encoder.layers.8.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5426676273345947
sparsity of layer encoder.layers.8.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5251333713531494
sparsity of layer encoder.layers.9.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5844192504882812
sparsity of layer encoder.layers.9.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5023784637451172
sparsity of layer encoder.layers.9.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5743322372436523
sparsity of layer encoder.layers.9.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5168485641479492
sparsity of layer encoder.layers.9.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5525999069213867
sparsity of layer encoder.layers.9.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5296018123626709
sparsity of layer encoder.layers.10.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5922422409057617
sparsity of layer encoder.layers.10.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.4690084457397461
sparsity of layer encoder.layers.10.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5987167358398438
sparsity of layer encoder.layers.10.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.47681331634521484
sparsity of layer encoder.layers.10.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5621500015258789
sparsity of layer encoder.layers.10.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5177137851715088
sparsity of layer encoder.layers.11.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5778236389160156
sparsity of layer encoder.layers.11.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.47756004333496094
sparsity of layer encoder.layers.11.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5752220153808594
sparsity of layer encoder.layers.11.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.48619937896728516
sparsity of layer encoder.layers.11.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5693113803863525
sparsity of layer encoder.layers.11.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5360302925109863
sparsity of layer decoder.embed_positions.weight with tensor torch.Size([1026, 1024]) is 0.6588189495004872
sparsity of layer decoder.layers.0.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.6420326232910156
sparsity of layer decoder.layers.0.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.8939599990844727
sparsity of layer decoder.layers.0.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.6040115356445312
sparsity of layer decoder.layers.0.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.9067211151123047
sparsity of layer decoder.layers.0.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5975580215454102
sparsity of layer decoder.layers.0.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7756977081298828
sparsity of layer decoder.layers.0.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5540800094604492
sparsity of layer decoder.layers.0.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7571706771850586
sparsity of layer decoder.layers.0.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5135378837585449
sparsity of layer decoder.layers.0.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6510915756225586
sparsity of layer decoder.layers.1.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.6895751953125
sparsity of layer decoder.layers.1.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7461185455322266
sparsity of layer decoder.layers.1.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.6796722412109375
sparsity of layer decoder.layers.1.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7992095947265625
sparsity of layer decoder.layers.1.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5733175277709961
sparsity of layer decoder.layers.1.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7539482116699219
sparsity of layer decoder.layers.1.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5497379302978516
sparsity of layer decoder.layers.1.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.728398323059082
sparsity of layer decoder.layers.1.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5023093223571777
sparsity of layer decoder.layers.1.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6382365226745605
sparsity of layer decoder.layers.2.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5199499130249023
sparsity of layer decoder.layers.2.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6587448120117188
sparsity of layer decoder.layers.2.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5143070220947266
sparsity of layer decoder.layers.2.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.7263517379760742
sparsity of layer decoder.layers.2.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5632915496826172
sparsity of layer decoder.layers.2.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6624441146850586
sparsity of layer decoder.layers.2.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5334491729736328
sparsity of layer decoder.layers.2.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6574487686157227
sparsity of layer decoder.layers.2.fc1.weight with tensor torch.Size([4096, 1024]) is 0.4991025924682617
sparsity of layer decoder.layers.2.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6265926361083984
sparsity of layer decoder.layers.3.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.4673328399658203
sparsity of layer decoder.layers.3.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6148548126220703
sparsity of layer decoder.layers.3.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.45902442932128906
sparsity of layer decoder.layers.3.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6846103668212891
sparsity of layer decoder.layers.3.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.557159423828125
sparsity of layer decoder.layers.3.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.7011632919311523
sparsity of layer decoder.layers.3.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5183095932006836
sparsity of layer decoder.layers.3.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6860361099243164
sparsity of layer decoder.layers.3.fc1.weight with tensor torch.Size([4096, 1024]) is 0.49553918838500977
sparsity of layer decoder.layers.3.fc2.weight with tensor torch.Size([1024, 4096]) is 0.6023757457733154
sparsity of layer decoder.layers.4.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.4817924499511719
sparsity of layer decoder.layers.4.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5962104797363281
sparsity of layer decoder.layers.4.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.47055721282958984
sparsity of layer decoder.layers.4.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6441726684570312
sparsity of layer decoder.layers.4.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5459995269775391
sparsity of layer decoder.layers.4.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6863183975219727
sparsity of layer decoder.layers.4.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5130901336669922
sparsity of layer decoder.layers.4.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6810169219970703
sparsity of layer decoder.layers.4.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5008988380432129
sparsity of layer decoder.layers.4.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5790891647338867
sparsity of layer decoder.layers.5.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5358953475952148
sparsity of layer decoder.layers.5.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5233316421508789
sparsity of layer decoder.layers.5.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5241069793701172
sparsity of layer decoder.layers.5.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5700435638427734
sparsity of layer decoder.layers.5.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5291042327880859
sparsity of layer decoder.layers.5.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.665553092956543
sparsity of layer decoder.layers.5.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5081443786621094
sparsity of layer decoder.layers.5.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6614532470703125
sparsity of layer decoder.layers.5.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5078890323638916
sparsity of layer decoder.layers.5.fc2.weight with tensor torch.Size([1024, 4096]) is 0.5493476390838623
sparsity of layer decoder.layers.6.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5653915405273438
sparsity of layer decoder.layers.6.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5286035537719727
sparsity of layer decoder.layers.6.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5492753982543945
sparsity of layer decoder.layers.6.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5648899078369141
sparsity of layer decoder.layers.6.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5337982177734375
sparsity of layer decoder.layers.6.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6664390563964844
sparsity of layer decoder.layers.6.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5161094665527344
sparsity of layer decoder.layers.6.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6697473526000977
sparsity of layer decoder.layers.6.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5074694156646729
sparsity of layer decoder.layers.6.fc2.weight with tensor torch.Size([1024, 4096]) is 0.517282247543335
sparsity of layer decoder.layers.7.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5409736633300781
sparsity of layer decoder.layers.7.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5396890640258789
sparsity of layer decoder.layers.7.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5275382995605469
sparsity of layer decoder.layers.7.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5769567489624023
sparsity of layer decoder.layers.7.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5334482192993164
sparsity of layer decoder.layers.7.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.6288681030273438
sparsity of layer decoder.layers.7.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5184736251831055
sparsity of layer decoder.layers.7.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6304187774658203
sparsity of layer decoder.layers.7.fc1.weight with tensor torch.Size([4096, 1024]) is 0.5048303604125977
sparsity of layer decoder.layers.7.fc2.weight with tensor torch.Size([1024, 4096]) is 0.48940253257751465
sparsity of layer decoder.layers.8.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.531916618347168
sparsity of layer decoder.layers.8.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5228357315063477
sparsity of layer decoder.layers.8.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5192937850952148
sparsity of layer decoder.layers.8.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5584001541137695
sparsity of layer decoder.layers.8.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5304546356201172
sparsity of layer decoder.layers.8.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.590907096862793
sparsity of layer decoder.layers.8.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5181570053100586
sparsity of layer decoder.layers.8.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5964870452880859
sparsity of layer decoder.layers.8.fc1.weight with tensor torch.Size([4096, 1024]) is 0.49961256980895996
sparsity of layer decoder.layers.8.fc2.weight with tensor torch.Size([1024, 4096]) is 0.46282529830932617
sparsity of layer decoder.layers.9.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5486660003662109
sparsity of layer decoder.layers.9.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.49619007110595703
sparsity of layer decoder.layers.9.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5374870300292969
sparsity of layer decoder.layers.9.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5184946060180664
sparsity of layer decoder.layers.9.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5305557250976562
sparsity of layer decoder.layers.9.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5304956436157227
sparsity of layer decoder.layers.9.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5196552276611328
sparsity of layer decoder.layers.9.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5371026992797852
sparsity of layer decoder.layers.9.fc1.weight with tensor torch.Size([4096, 1024]) is 0.49541783332824707
sparsity of layer decoder.layers.9.fc2.weight with tensor torch.Size([1024, 4096]) is 0.44229912757873535
sparsity of layer decoder.layers.10.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5628414154052734
sparsity of layer decoder.layers.10.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5097866058349609
sparsity of layer decoder.layers.10.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5482206344604492
sparsity of layer decoder.layers.10.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.5257530212402344
sparsity of layer decoder.layers.10.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.52435302734375
sparsity of layer decoder.layers.10.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.46108436584472656
sparsity of layer decoder.layers.10.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.5081081390380859
sparsity of layer decoder.layers.10.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.4659442901611328
sparsity of layer decoder.layers.10.fc1.weight with tensor torch.Size([4096, 1024]) is 0.48995041847229004
sparsity of layer decoder.layers.10.fc2.weight with tensor torch.Size([1024, 4096]) is 0.4275376796722412
sparsity of layer decoder.layers.11.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.6076736450195312
sparsity of layer decoder.layers.11.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.5745420455932617
sparsity of layer decoder.layers.11.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.4193582534790039
sparsity of layer decoder.layers.11.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.6532468795776367
sparsity of layer decoder.layers.11.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.5018281936645508
sparsity of layer decoder.layers.11.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.44771289825439453
sparsity of layer decoder.layers.11.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.48511791229248047
sparsity of layer decoder.layers.11.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.4585256576538086
sparsity of layer decoder.layers.11.fc1.weight with tensor torch.Size([4096, 1024]) is 0.4875509738922119
sparsity of layer decoder.layers.11.fc2.weight with tensor torch.Size([1024, 4096]) is 0.43427324295043945
Final sparsity level of 0.6: 0.6001805443638009
2023-08-29 21:08:17 | INFO | fairseq_cli.train | Start iterating over samples
2023-08-29 21:08:17 | INFO | fairseq_cli.train | begin validation on "valid" subset
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=54859.25390625Mb; avail=456590.73046875Mb
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler order indices time: 0:00:00.016266
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=53244.5Mb; avail=456590.73046875Mb
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler filter_by_size time: 0:00:00.081081
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=53244.5Mb; avail=456590.73046875Mb
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler batch_by_size time: 0:00:00.059280
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] per epoch batch_sampler set-up time: 0:00:00.157320
2023-08-29 21:08:17 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=53244.5Mb; avail=456590.73046875Mb
2023-08-29 21:08:25 | INFO | valid | epoch 001 | valid on 'valid' subset | loss 51.071 | nll_loss 44.823 | ppl 3.11153e+13 | wps 17136.5 | wpb 556.3 | bsz 44.4 | num_updates 0
saved best is 51.071
2023-08-29 21:08:25 | INFO | fairseq.checkpoint_utils | Preparing to save checkpoint for epoch 1 @ 0 updates
2023-08-29 21:08:25 | INFO | fairseq.trainer | Saving checkpoint to /gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/minority_pre_2to2/0.6/checkpoint_1_0.pt
2023-08-29 21:08:31 | INFO | fairseq.trainer | Finished saving checkpoint to /gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/minority_pre_2to2/0.6/checkpoint_1_0.pt
2023-08-29 21:08:36 | INFO | fairseq.checkpoint_utils | Saved checkpoint minority_pre_2to2/0.6/checkpoint_1_0.pt (epoch 1 @ 0 updates, score 51.071) (writing took 11.068986024241894 seconds)
2023-08-29 21:08:36 | INFO | fairseq_cli.train | end of epoch 1 (average epoch stats below)
2023-08-29 21:08:36 | INFO | train | epoch 001 | lr 0 | wall 60
should_stop=should_stop=should_stop=should_stop True
2023-08-29 21:08:36 | INFO | fairseq_cli.train | done training in 54.8 seconds
*** Sparsity for minority_pre_2to2/0.6//checkpoint_last.pt = 55.2572%
2023-08-29 21:08:43 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:08:45 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'minority_pre_2to2/0.6//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='minority_pre_2to2/0.6//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='en', suppress_crashes=False, target_dict=None, target_lang='my', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:08:45 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:08:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:08:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | [my] dictionary: 250026 types
2023-08-29 21:08:46 | INFO | fairseq_cli.generate | loading model(s) from minority_pre_2to2/0.6//checkpoint_last.pt
2023-08-29 21:09:05 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:09:05 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=39053.19921875Mb; avail=470752.59765625Mb
2023-08-29 21:09:05 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:09:05 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:en-my': 1}
2023-08-29 21:09:05 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-my src_langtok: 250002; tgt_langtok: 250001
2023-08-29 21:09:05 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-my.en
2023-08-29 21:09:05 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-my.my
2023-08-29 21:09:05 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test en-my 2000 examples
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=38856.09375Mb; avail=470939.69140625Mb
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.000878
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38856.09375Mb; avail=470939.69140625Mb
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.018208
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38856.328125Mb; avail=470939.44140625Mb
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.016016
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.035714
2023-08-29 21:09:08 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38856.328125Mb; avail=470939.44140625Mb
2023-08-29 21:16:30 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:16:30 | INFO | fairseq_cli.generate | Translated 2,000 sentences (402,000 tokens) in 434.0s (4.61 sentences/s, 926.37 tokens/s)
2023-08-29 21:16:32 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:16:35 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'minority_pre_2to2/0.6//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='minority_pre_2to2/0.6//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='my', suppress_crashes=False, target_dict=None, target_lang='en', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:16:35 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:16:35 | INFO | fairseq.data.multilingual.multilingual_data_manager | [my] dictionary: 250026 types
2023-08-29 21:16:35 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:16:35 | INFO | fairseq_cli.generate | loading model(s) from minority_pre_2to2/0.6//checkpoint_last.pt
2023-08-29 21:16:57 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:16:57 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=39046.7109375Mb; avail=470450.5859375Mb
2023-08-29 21:16:57 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:16:57 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:my-en': 1}
2023-08-29 21:16:57 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:my-en src_langtok: 250001; tgt_langtok: 250002
2023-08-29 21:16:57 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-my.my
2023-08-29 21:16:57 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-my.en
2023-08-29 21:16:57 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test my-en 2000 examples
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36040.5859375Mb; avail=473436.70703125Mb
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.000881
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36040.5859375Mb; avail=473436.70703125Mb
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.018222
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36049.67578125Mb; avail=473427.6171875Mb
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.015649
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.035376
2023-08-29 21:17:00 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36062.20703125Mb; avail=473415.0859375Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:24:06 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:24:06 | INFO | fairseq_cli.generate | Translated 2,000 sentences (329,806 tokens) in 417.0s (4.80 sentences/s, 790.87 tokens/s)
2023-08-29 21:24:08 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:24:10 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'minority_pre_2to2/0.6//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='minority_pre_2to2/0.6//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='en', suppress_crashes=False, target_dict=None, target_lang='gu', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:24:10 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:24:10 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:24:11 | INFO | fairseq.data.multilingual.multilingual_data_manager | [gu] dictionary: 250026 types
2023-08-29 21:24:11 | INFO | fairseq_cli.generate | loading model(s) from minority_pre_2to2/0.6//checkpoint_last.pt
2023-08-29 21:24:34 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:24:34 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36761.82421875Mb; avail=472716.2421875Mb
2023-08-29 21:24:34 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:24:34 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:en-gu': 1}
2023-08-29 21:24:34 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-gu src_langtok: 250002; tgt_langtok: 250025
2023-08-29 21:24:34 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-gu.en
2023-08-29 21:24:34 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-gu.gu
2023-08-29 21:24:34 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test en-gu 2000 examples
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36542.02734375Mb; avail=472926.0390625Mb
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.000871
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36542.02734375Mb; avail=472926.0390625Mb
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.017951
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36542.02734375Mb; avail=472926.0390625Mb
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.015334
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.034755
2023-08-29 21:24:37 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36542.02734375Mb; avail=472926.0390625Mb
2023-08-29 21:31:57 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:31:57 | INFO | fairseq_cli.generate | Translated 2,000 sentences (402,000 tokens) in 432.8s (4.62 sentences/s, 928.78 tokens/s)
2023-08-29 21:32:00 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:32:02 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'minority_pre_2to2/0.6//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-my,en-gu,gu-en,my-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='minority_pre_2to2/0.6//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='gu', suppress_crashes=False, target_dict=None, target_lang='en', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:32:02 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:32:02 | INFO | fairseq.data.multilingual.multilingual_data_manager | [gu] dictionary: 250026 types
2023-08-29 21:32:03 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:32:03 | INFO | fairseq_cli.generate | loading model(s) from minority_pre_2to2/0.6//checkpoint_last.pt
2023-08-29 21:32:24 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:32:24 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36829.27734375Mb; avail=472648.56640625Mb
2023-08-29 21:32:24 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:32:24 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:gu-en': 1}
2023-08-29 21:32:24 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:gu-en src_langtok: 250025; tgt_langtok: 250002
2023-08-29 21:32:24 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-gu.gu
2023-08-29 21:32:24 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-gu.en
2023-08-29 21:32:24 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test gu-en 2000 examples
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36611.765625Mb; avail=472856.078125Mb
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.000861
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36611.765625Mb; avail=472856.078125Mb
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.018158
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36611.765625Mb; avail=472856.078125Mb
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.015652
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.035275
2023-08-29 21:32:27 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36611.765625Mb; avail=472856.078125Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:39:44 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:39:44 | INFO | fairseq_cli.generate | Translated 2,000 sentences (394,403 tokens) in 429.3s (4.66 sentences/s, 918.64 tokens/s)

JOB STATISTICS
==============
Job ID: 3570096
Cluster: snellius
User/Group: xiaoq/xiaoq
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:35:10
CPU Efficiency: 5.95% of 09:50:42 core-walltime
Job Wall-clock time: 00:32:49
Memory Utilized: 21.00 GB
Memory Efficiency: 17.50% of 120.00 GB
WARNING: Efficiency statistics may be misleading for RUNNING jobs.
