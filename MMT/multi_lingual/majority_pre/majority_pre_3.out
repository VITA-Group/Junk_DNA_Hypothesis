/var/spool/slurm/slurmd/job3570040/slurm_script: line 11: /home/luuyin/miniconda3/etc/profile.d/conda.sh: No such file or directory
2023-08-29 20:54:35 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 20:54:38 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': 'simple', 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 222, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': None, 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': 1024, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 1024, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 1, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [2], 'lr': [3e-05], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'majority_pre_2to2/0.3/', 'restore_file': 'examples/multilingual/mbart.cc25.v2/model.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': True, 'reset_lr_scheduler': False, 'reset_meters': True, 'reset_optimizer': True, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 50000, 'keep_interval_updates': 10, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': True, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='mbart_large', activation_fn='gelu', adam_betas='(0.9, 0.98)', adam_eps=1e-06, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='mbart_large', attention_dropout=0.1, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=0.0, combine_valid_subsets=None, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_attention_heads=16, decoder_embed_dim=1024, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1024, decoder_langtok=True, decoder_layers=12, decoder_learned_pos=True, decoder_normalize_before=True, decoder_output_dim=1024, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, dropout=0.3, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_attention_heads=16, encoder_embed_dim=1024, encoder_embed_path=None, encoder_ffn_embed_dim=4096, encoder_langtok='src', encoder_layers=12, encoder_learned_pos=True, encoder_normalize_before=True, eos=2, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, final_prune_time=0.8, find_unused_parameters=False, finetune_from_model=None, fix=True, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, growth=None, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, imp_iters=1, initial_prune_time=0.1, initialization_checkpoint=None, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=10, keep_interval_updates_pattern=-1, keep_last_epochs=-1, label_smoothing=0.2, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], layernorm_embedding=True, left_pad_source='True', left_pad_target='False', load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format='simple', log_interval=100, lr=[3e-05], lr_scheduler='inverse_sqrt', max_epoch=0, max_source_positions=1024, max_target_positions=1024, max_tokens=1024, max_tokens_valid=1024, max_update=1, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, noembed=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', pooler_activation_fn='tanh', pooler_dropout=0.0, profile=False, prune=None, prune_rate=0.5, quantization_config_path=None, redistribution=None, relu_dropout=0.0, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=True, reset_logging=False, reset_lr_scheduler=False, reset_meters=True, reset_optimizer=True, restore_file='examples/multilingual/mbart.cc25.v2/model.pt', sampling_method='temperature', sampling_temperature=1.5, sampling_weights=None, sampling_weights_from_file=None, save_dir='majority_pre_2to2/0.3/', save_interval=1, save_interval_updates=50000, scoring='bleu', seed=222, sentence_avg=False, shard_id=0, share_all_embeddings=True, share_decoder_input_output_embed=True, simul_type=None, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang=None, sparse=True, sparse_init='one_shot_gm_cpu', sparse_mode='fix', sparsity=0.3, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_dict=None, target_lang=None, task='translation_multi_simple_epoch', tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[2], update_frequency=1500, update_ordered_indices_seed=False, upsample_primary=1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_init_lr=-1, warmup_updates=1, weight_decay=0.0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'task': Namespace(_name='translation_multi_simple_epoch', activation_fn='gelu', adam_betas='(0.9, 0.98)', adam_eps=1e-06, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='mbart_large', attention_dropout=0.1, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=0.0, combine_valid_subsets=None, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_attention_heads=16, decoder_embed_dim=1024, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1024, decoder_langtok=True, decoder_layers=12, decoder_learned_pos=True, decoder_normalize_before=True, decoder_output_dim=1024, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, dropout=0.3, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_attention_heads=16, encoder_embed_dim=1024, encoder_embed_path=None, encoder_ffn_embed_dim=4096, encoder_langtok='src', encoder_layers=12, encoder_learned_pos=True, encoder_normalize_before=True, eos=2, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, final_prune_time=0.8, find_unused_parameters=False, finetune_from_model=None, fix=True, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, growth=None, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, imp_iters=1, initial_prune_time=0.1, initialization_checkpoint=None, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=10, keep_interval_updates_pattern=-1, keep_last_epochs=-1, label_smoothing=0.2, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], layernorm_embedding=True, left_pad_source='True', left_pad_target='False', load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format='simple', log_interval=100, lr=[3e-05], lr_scheduler='inverse_sqrt', max_epoch=0, max_source_positions=1024, max_target_positions=1024, max_tokens=1024, max_tokens_valid=1024, max_update=1, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_loss_scale=0.0001, model_parallel_size=1, no_epoch_checkpoints=True, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, noembed=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', pooler_activation_fn='tanh', pooler_dropout=0.0, profile=False, prune=None, prune_rate=0.5, quantization_config_path=None, redistribution=None, relu_dropout=0.0, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=True, reset_logging=False, reset_lr_scheduler=False, reset_meters=True, reset_optimizer=True, restore_file='examples/multilingual/mbart.cc25.v2/model.pt', sampling_method='temperature', sampling_temperature=1.5, sampling_weights=None, sampling_weights_from_file=None, save_dir='majority_pre_2to2/0.3/', save_interval=1, save_interval_updates=50000, scoring='bleu', seed=222, sentence_avg=False, shard_id=0, share_all_embeddings=True, share_decoder_input_output_embed=True, simul_type=None, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang=None, sparse=True, sparse_init='one_shot_gm_cpu', sparse_mode='fix', sparsity=0.3, stop_min_lr=-1.0, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_dict=None, target_lang=None, task='translation_multi_simple_epoch', tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[2], update_frequency=1500, update_ordered_indices_seed=False, upsample_primary=1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_init_lr=-1, warmup_updates=1, weight_decay=0.0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'label_smoothed_cross_entropy', 'label_smoothing': 0.2, 'report_accuracy': False, 'ignore_prefix_size': 0, 'sentence_avg': False}, 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9, 0.98)', 'adam_eps': 1e-06, 'weight_decay': 0.0, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [3e-05]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 1, 'warmup_init_lr': -1.0, 'lr': [3e-05]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': True, 'noembed': False, 'fix': True, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': 'one_shot_gm_cpu', 'redistribution': None, 'sparsity': 0.3, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}, 'simul_type': None}
2023-08-29 20:54:38 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 20:54:40 | INFO | fairseq.data.multilingual.multilingual_data_manager | [vi] dictionary: 250026 types
2023-08-29 20:54:42 | INFO | fairseq.data.multilingual.multilingual_data_manager | [vi] dictionary: 250026 types
2023-08-29 20:55:09 | INFO | fairseq_cli.train | BARTModel(
  (encoder): TransformerEncoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(250026, 1024, padding_idx=1)
    (embed_positions): LearnedPositionalEmbedding(1026, 1024, padding_idx=1)
    (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (layers): ModuleList(
      (0): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (6): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (7): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (8): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (9): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (10): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (11): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  )
  (decoder): TransformerDecoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(250026, 1024, padding_idx=1)
    (embed_positions): LearnedPositionalEmbedding(1026, 1024, padding_idx=1)
    (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (layers): ModuleList(
      (0): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (6): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (7): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (8): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (9): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (10): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (11): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (v_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (q_proj): Linear(in_features=1024, out_features=1024, bias=True)
          (out_proj): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1024, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1024, bias=True)
        (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
    )
    (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (output_projection): Linear(in_features=1024, out_features=250026, bias=False)
  )
  (classification_heads): ModuleDict()
)
2023-08-29 20:55:09 | INFO | fairseq_cli.train | task: TranslationMultiSimpleEpochTask
2023-08-29 20:55:09 | INFO | fairseq_cli.train | model: BARTModel
2023-08-29 20:55:09 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropyCriterion
2023-08-29 20:55:09 | INFO | fairseq_cli.train | num. shared model params: 761,956,352 (num. trained: 761,956,352)
2023-08-29 20:55:09 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
2023-08-29 20:55:09 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for valid epoch=1/None
2023-08-29 20:55:09 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=32793.625Mb; avail=477166.28515625Mb
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | [valid] num of shards: {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1}
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:en-ru
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:en-vi
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:vi-en
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:ru-en
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-ru src_langtok: 250002; tgt_langtok: 250003
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-ru.en
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-ru.ru
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid en-ru 2000 examples
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-vi src_langtok: 250002; tgt_langtok: 250004
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-vi.en
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-vi.vi
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid en-vi 2000 examples
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:vi-en src_langtok: 250004; tgt_langtok: 250002
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-vi.vi
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-vi.en
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid vi-en 2000 examples
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:ru-en src_langtok: 250003; tgt_langtok: 250002
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-ru.ru
2023-08-29 20:55:09 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/valid.en-ru.en
2023-08-29 20:55:09 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata valid ru-en 2000 examples
2023-08-29 20:55:14 | INFO | fairseq.trainer | detected shared parameter: encoder.embed_tokens.weight <- decoder.embed_tokens.weight
2023-08-29 20:55:14 | INFO | fairseq.trainer | detected shared parameter: encoder.embed_tokens.weight <- decoder.output_projection.weight
2023-08-29 20:55:14 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-08-29 20:55:14 | INFO | fairseq.utils | rank   0: capabilities =  8.0  ; total memory = 39.438 GB ; name = NVIDIA A100-SXM4-40GB                   
2023-08-29 20:55:14 | INFO | fairseq.utils | ***********************CUDA enviroments for all 1 workers***********************
2023-08-29 20:55:14 | INFO | fairseq_cli.train | training on 1 devices (GPUs/TPUs)
2023-08-29 20:55:14 | INFO | fairseq_cli.train | max tokens per device = 1024 and max sentences per device = None
2023-08-29 20:55:14 | INFO | fairseq.trainer | Preparing to load checkpoint examples/multilingual/mbart.cc25.v2/model.pt
2023-08-29 20:55:21 | INFO | fairseq.trainer | NOTE: your device may support faster training with --fp16 or --amp
2023-08-29 20:55:21 | INFO | fairseq.trainer | Loaded checkpoint examples/multilingual/mbart.cc25.v2/model.pt (epoch 142 @ 0 updates)
******************************************
resetting dataloader
******************************************
2023-08-29 20:55:21 | INFO | fairseq.trainer | loading train data for epoch 1
2023-08-29 20:55:21 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for train epoch=1/None
2023-08-29 20:55:21 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36118.6171875Mb; avail=473707.20703125Mb
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | [train] num of shards: {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1}
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:en-ru
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:en-vi
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:vi-en
split_num_shards_dict {'main:en-ru': 1, 'main:en-vi': 1, 'main:vi-en': 1, 'main:ru-en': 1} main:ru-en
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-ru src_langtok: 250002; tgt_langtok: 250003
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-ru.en
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-ru.ru
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train en-ru 1000000 examples
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-vi src_langtok: 250002; tgt_langtok: 250004
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-vi.en
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-vi.vi
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train en-vi 1000000 examples
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:vi-en src_langtok: 250004; tgt_langtok: 250002
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-vi.vi
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-vi.en
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train vi-en 1000000 examples
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:ru-en src_langtok: 250003; tgt_langtok: 250002
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-ru.ru
2023-08-29 20:55:21 | INFO | fairseq.data.data_utils | loaded 1,000,000 examples from: examples/multilingual/multidata/train.en-ru.en
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata train ru-en 1000000 examples
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | estimated total data sizes of all shards used in sampling ratios: [('main:en-ru', 1000000), ('main:en-vi', 1000000), ('main:vi-en', 1000000), ('main:ru-en', 1000000)]. Note that if the data a shard has not been loaded yet, use the max known data size to approximate
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.sampling_method | selected sampler: temperature
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.multilingual_data_manager | | Upsample ratios: [('main:en-ru', 0.3968502629920499), ('main:en-vi', 0.3968502629920499), ('main:vi-en', 0.3968502629920499), ('main:ru-en', 0.3968502629920499)]
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Raw sizes: {'main:en-ru': 1000000, 'main:en-vi': 1000000, 'main:vi-en': 1000000, 'main:ru-en': 1000000}; raw total size: 4000000
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Resampled sizes: {'main:en-ru': 1000000, 'main:en-vi': 1000000, 'main:vi-en': 1000000, 'main:ru-en': 1000000}; resampled total size: 4000000
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] Upsampling ratios: {'main:en-ru': 0.3968502629920499, 'main:en-vi': 0.3968502629920499, 'main:vi-en': 0.3968502629920499, 'main:ru-en': 0.3968502629920499}
2023-08-29 20:55:21 | INFO | fairseq.data.multilingual.sampled_multi_dataset | [train] virtual dataset established time: 0:00:00.140489
2023-08-29 20:55:21 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36134.88671875Mb; avail=473691.1796875Mb
2023-08-29 20:55:22 | INFO | fairseq.data.multilingual.sampled_multi_dataset | sizes() calling time: 0:00:00.158270
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler order indices time: 0:00:01.272397
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=37757.94921875Mb; avail=472062.7890625Mb
2023-08-29 20:55:23 | WARNING | fairseq.tasks.fairseq_task | 62 samples have invalid sizes and will be skipped, max_positions=(1024, 1024), first few sample ids=[975323, 528816, 754979, 693569, 843722, 3999394, 3126806, 339643, 3191582, 7378]
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler filter_by_size time: 0:00:00.085197
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=37922.55078125Mb; avail=471898.62109375Mb
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] @batch_sampler batch_by_size time: 0:00:00.440282
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | [train] per epoch batch_sampler set-up time: 0:00:01.798886
2023-08-29 20:55:23 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38719.625Mb; avail=471101.13671875Mb
2023-08-29 20:55:24 | INFO | fairseq.data.iterators | grouped total_num_itrs = 37854
2023-08-29 20:55:24 | INFO | fairseq.trainer | begin training epoch 1
2023-08-29 20:55:24 | INFO | fairseq_cli.train | '**********Start pruning the model**********************'
update  2
Growth mode: None not supported!
Supported modes are: ['random', 'momentum', 'momentum_neuron', 'gradient']
Removing in_proj_weight
Removed 12 layers.
Removing out_proj_weight
Removed 12 layers.
Removing fc1_weight
Removed 12 layers.
Removing fc2_weight
Removed 12 layers.
lm_head.dense.weight
Removed 0 layers.
initialize by one_shot_gm
sparsity of layer encoder.embed_tokens.weight with tensor torch.Size([250026, 1024]) is 0.39637750720800036
sparsity of layer encoder.embed_positions.weight with tensor torch.Size([1026, 1024]) is 0.2601787128411306
sparsity of layer encoder.layers.0.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2757225036621094
sparsity of layer encoder.layers.0.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.30989646911621094
sparsity of layer encoder.layers.0.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2634458541870117
sparsity of layer encoder.layers.0.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.34101390838623047
sparsity of layer encoder.layers.0.fc1.weight with tensor torch.Size([4096, 1024]) is 0.2294328212738037
sparsity of layer encoder.layers.0.fc2.weight with tensor torch.Size([1024, 4096]) is 0.3004751205444336
sparsity of layer encoder.layers.1.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2387523651123047
sparsity of layer encoder.layers.1.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.34149932861328125
sparsity of layer encoder.layers.1.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2221393585205078
sparsity of layer encoder.layers.1.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.3240776062011719
sparsity of layer encoder.layers.1.fc1.weight with tensor torch.Size([4096, 1024]) is 0.22165441513061523
sparsity of layer encoder.layers.1.fc2.weight with tensor torch.Size([1024, 4096]) is 0.285383939743042
sparsity of layer encoder.layers.2.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.22571372985839844
sparsity of layer encoder.layers.2.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.3136100769042969
sparsity of layer encoder.layers.2.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2190999984741211
sparsity of layer encoder.layers.2.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.316864013671875
sparsity of layer encoder.layers.2.fc1.weight with tensor torch.Size([4096, 1024]) is 0.21500825881958008
sparsity of layer encoder.layers.2.fc2.weight with tensor torch.Size([1024, 4096]) is 0.28023648262023926
sparsity of layer encoder.layers.3.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2272043228149414
sparsity of layer encoder.layers.3.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.27007102966308594
sparsity of layer encoder.layers.3.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2231311798095703
sparsity of layer encoder.layers.3.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.27947044372558594
sparsity of layer encoder.layers.3.fc1.weight with tensor torch.Size([4096, 1024]) is 0.21029114723205566
sparsity of layer encoder.layers.3.fc2.weight with tensor torch.Size([1024, 4096]) is 0.2748994827270508
sparsity of layer encoder.layers.4.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21561622619628906
sparsity of layer encoder.layers.4.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.2543821334838867
sparsity of layer encoder.layers.4.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.21524906158447266
sparsity of layer encoder.layers.4.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2730283737182617
sparsity of layer encoder.layers.4.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20575666427612305
sparsity of layer encoder.layers.4.fc2.weight with tensor torch.Size([1024, 4096]) is 0.267683744430542
sparsity of layer encoder.layers.5.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.18171215057373047
sparsity of layer encoder.layers.5.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.2519960403442383
sparsity of layer encoder.layers.5.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.18980884552001953
sparsity of layer encoder.layers.5.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2927837371826172
sparsity of layer encoder.layers.5.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19997477531433105
sparsity of layer encoder.layers.5.fc2.weight with tensor torch.Size([1024, 4096]) is 0.24294590950012207
sparsity of layer encoder.layers.6.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.18233966827392578
sparsity of layer encoder.layers.6.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.22403335571289062
sparsity of layer encoder.layers.6.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.19153118133544922
sparsity of layer encoder.layers.6.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2575998306274414
sparsity of layer encoder.layers.6.fc1.weight with tensor torch.Size([4096, 1024]) is 0.2019197940826416
sparsity of layer encoder.layers.6.fc2.weight with tensor torch.Size([1024, 4096]) is 0.23111867904663086
sparsity of layer encoder.layers.7.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.19786548614501953
sparsity of layer encoder.layers.7.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.20427227020263672
sparsity of layer encoder.layers.7.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2038259506225586
sparsity of layer encoder.layers.7.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2299795150756836
sparsity of layer encoder.layers.7.fc1.weight with tensor torch.Size([4096, 1024]) is 0.21179938316345215
sparsity of layer encoder.layers.7.fc2.weight with tensor torch.Size([1024, 4096]) is 0.21991276741027832
sparsity of layer encoder.layers.8.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21764659881591797
sparsity of layer encoder.layers.8.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.20481491088867188
sparsity of layer encoder.layers.8.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.22163963317871094
sparsity of layer encoder.layers.8.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.21341419219970703
sparsity of layer encoder.layers.8.fc1.weight with tensor torch.Size([4096, 1024]) is 0.2194538116455078
sparsity of layer encoder.layers.8.fc2.weight with tensor torch.Size([1024, 4096]) is 0.21210956573486328
sparsity of layer encoder.layers.9.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2399158477783203
sparsity of layer encoder.layers.9.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.20023155212402344
sparsity of layer encoder.layers.9.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.23397445678710938
sparsity of layer encoder.layers.9.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.20725440979003906
sparsity of layer encoder.layers.9.fc1.weight with tensor torch.Size([4096, 1024]) is 0.2245187759399414
sparsity of layer encoder.layers.9.fc2.weight with tensor torch.Size([1024, 4096]) is 0.21517062187194824
sparsity of layer encoder.layers.10.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2430562973022461
sparsity of layer encoder.layers.10.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.18648624420166016
sparsity of layer encoder.layers.10.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.24726009368896484
sparsity of layer encoder.layers.10.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.1896352767944336
sparsity of layer encoder.layers.10.fc1.weight with tensor torch.Size([4096, 1024]) is 0.22925710678100586
sparsity of layer encoder.layers.10.fc2.weight with tensor torch.Size([1024, 4096]) is 0.20900678634643555
sparsity of layer encoder.layers.11.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2361764907836914
sparsity of layer encoder.layers.11.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.19007205963134766
sparsity of layer encoder.layers.11.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2349090576171875
sparsity of layer encoder.layers.11.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.19306182861328125
sparsity of layer encoder.layers.11.fc1.weight with tensor torch.Size([4096, 1024]) is 0.23265361785888672
sparsity of layer encoder.layers.11.fc2.weight with tensor torch.Size([1024, 4096]) is 0.2186274528503418
sparsity of layer decoder.embed_positions.weight with tensor torch.Size([1026, 1024]) is 0.3506754081384016
sparsity of layer decoder.layers.0.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2818870544433594
sparsity of layer decoder.layers.0.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.4675760269165039
sparsity of layer decoder.layers.0.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.25382041931152344
sparsity of layer decoder.layers.0.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.49216175079345703
sparsity of layer decoder.layers.0.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2555112838745117
sparsity of layer decoder.layers.0.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.3622159957885742
sparsity of layer decoder.layers.0.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.23134613037109375
sparsity of layer decoder.layers.0.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.35731983184814453
sparsity of layer decoder.layers.0.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20561695098876953
sparsity of layer decoder.layers.0.fc2.weight with tensor torch.Size([1024, 4096]) is 0.27517032623291016
sparsity of layer decoder.layers.1.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.3113861083984375
sparsity of layer decoder.layers.1.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.3407611846923828
sparsity of layer decoder.layers.1.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.3107566833496094
sparsity of layer decoder.layers.1.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.40007781982421875
sparsity of layer decoder.layers.1.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.23768997192382812
sparsity of layer decoder.layers.1.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.3444337844848633
sparsity of layer decoder.layers.1.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.23026275634765625
sparsity of layer decoder.layers.1.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.3386268615722656
sparsity of layer decoder.layers.1.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20028471946716309
sparsity of layer decoder.layers.1.fc2.weight with tensor torch.Size([1024, 4096]) is 0.2688326835632324
sparsity of layer decoder.layers.2.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2169666290283203
sparsity of layer decoder.layers.2.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.2870006561279297
sparsity of layer decoder.layers.2.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.21428871154785156
sparsity of layer decoder.layers.2.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.3305015563964844
sparsity of layer decoder.layers.2.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.22848796844482422
sparsity of layer decoder.layers.2.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.28563785552978516
sparsity of layer decoder.layers.2.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2143087387084961
sparsity of layer decoder.layers.2.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2801084518432617
sparsity of layer decoder.layers.2.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19838619232177734
sparsity of layer decoder.layers.2.fc2.weight with tensor torch.Size([1024, 4096]) is 0.26242780685424805
sparsity of layer decoder.layers.3.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.18604278564453125
sparsity of layer decoder.layers.3.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.25875091552734375
sparsity of layer decoder.layers.3.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.18257713317871094
sparsity of layer decoder.layers.3.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2984189987182617
sparsity of layer decoder.layers.3.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.22663307189941406
sparsity of layer decoder.layers.3.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.308837890625
sparsity of layer decoder.layers.3.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20684337615966797
sparsity of layer decoder.layers.3.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2983694076538086
sparsity of layer decoder.layers.3.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19691801071166992
sparsity of layer decoder.layers.3.fc2.weight with tensor torch.Size([1024, 4096]) is 0.24995136260986328
sparsity of layer decoder.layers.4.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.19248199462890625
sparsity of layer decoder.layers.4.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.25509166717529297
sparsity of layer decoder.layers.4.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.18662261962890625
sparsity of layer decoder.layers.4.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.27976322174072266
sparsity of layer decoder.layers.4.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.22100162506103516
sparsity of layer decoder.layers.4.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.2981147766113281
sparsity of layer decoder.layers.4.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20520305633544922
sparsity of layer decoder.layers.4.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2942466735839844
sparsity of layer decoder.layers.4.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20022249221801758
sparsity of layer decoder.layers.4.fc2.weight with tensor torch.Size([1024, 4096]) is 0.2380695343017578
sparsity of layer decoder.layers.5.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21788406372070312
sparsity of layer decoder.layers.5.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.2133035659790039
sparsity of layer decoder.layers.5.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2110300064086914
sparsity of layer decoder.layers.5.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.23509597778320312
sparsity of layer decoder.layers.5.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21199703216552734
sparsity of layer decoder.layers.5.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.286163330078125
sparsity of layer decoder.layers.5.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20306777954101562
sparsity of layer decoder.layers.5.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.28261375427246094
sparsity of layer decoder.layers.5.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20240378379821777
sparsity of layer decoder.layers.5.fc2.weight with tensor torch.Size([1024, 4096]) is 0.22340774536132812
sparsity of layer decoder.layers.6.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.23300457000732422
sparsity of layer decoder.layers.6.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.21476364135742188
sparsity of layer decoder.layers.6.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.22434234619140625
sparsity of layer decoder.layers.6.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.23257160186767578
sparsity of layer decoder.layers.6.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21422100067138672
sparsity of layer decoder.layers.6.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.28603076934814453
sparsity of layer decoder.layers.6.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2056140899658203
sparsity of layer decoder.layers.6.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2879753112792969
sparsity of layer decoder.layers.6.fc1.weight with tensor torch.Size([4096, 1024]) is 0.20244717597961426
sparsity of layer decoder.layers.6.fc2.weight with tensor torch.Size([1024, 4096]) is 0.20823168754577637
sparsity of layer decoder.layers.7.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21943378448486328
sparsity of layer decoder.layers.7.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.22082805633544922
sparsity of layer decoder.layers.7.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.21250629425048828
sparsity of layer decoder.layers.7.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.23849201202392578
sparsity of layer decoder.layers.7.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21458148956298828
sparsity of layer decoder.layers.7.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.26632213592529297
sparsity of layer decoder.layers.7.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20740318298339844
sparsity of layer decoder.layers.7.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.26630496978759766
sparsity of layer decoder.layers.7.fc1.weight with tensor torch.Size([4096, 1024]) is 0.2013416290283203
sparsity of layer decoder.layers.7.fc2.weight with tensor torch.Size([1024, 4096]) is 0.195420503616333
sparsity of layer decoder.layers.8.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21430397033691406
sparsity of layer decoder.layers.8.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.21214675903320312
sparsity of layer decoder.layers.8.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.207855224609375
sparsity of layer decoder.layers.8.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.2284259796142578
sparsity of layer decoder.layers.8.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.21333599090576172
sparsity of layer decoder.layers.8.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.24651527404785156
sparsity of layer decoder.layers.8.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20704174041748047
sparsity of layer decoder.layers.8.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.24839496612548828
sparsity of layer decoder.layers.8.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19865202903747559
sparsity of layer decoder.layers.8.fc2.weight with tensor torch.Size([1024, 4096]) is 0.18361330032348633
sparsity of layer decoder.layers.9.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2215719223022461
sparsity of layer decoder.layers.9.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.19886112213134766
sparsity of layer decoder.layers.9.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.2163410186767578
sparsity of layer decoder.layers.9.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.20978641510009766
sparsity of layer decoder.layers.9.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2127523422241211
sparsity of layer decoder.layers.9.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.21657371520996094
sparsity of layer decoder.layers.9.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20745849609375
sparsity of layer decoder.layers.9.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.21854496002197266
sparsity of layer decoder.layers.9.fc1.weight with tensor torch.Size([4096, 1024]) is 0.1963644027709961
sparsity of layer decoder.layers.9.fc2.weight with tensor torch.Size([1024, 4096]) is 0.17435097694396973
sparsity of layer decoder.layers.10.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.2283926010131836
sparsity of layer decoder.layers.10.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.20590591430664062
sparsity of layer decoder.layers.10.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.22086620330810547
sparsity of layer decoder.layers.10.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.21213245391845703
sparsity of layer decoder.layers.10.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.20961475372314453
sparsity of layer decoder.layers.10.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.18284988403320312
sparsity of layer decoder.layers.10.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.20250606536865234
sparsity of layer decoder.layers.10.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.18495464324951172
sparsity of layer decoder.layers.10.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19401931762695312
sparsity of layer decoder.layers.10.fc2.weight with tensor torch.Size([1024, 4096]) is 0.16791749000549316
sparsity of layer decoder.layers.11.self_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.25104618072509766
sparsity of layer decoder.layers.11.self_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.23868370056152344
sparsity of layer decoder.layers.11.self_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.16538619995117188
sparsity of layer decoder.layers.11.self_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.280670166015625
sparsity of layer decoder.layers.11.encoder_attn.k_proj.weight with tensor torch.Size([1024, 1024]) is 0.19979000091552734
sparsity of layer decoder.layers.11.encoder_attn.v_proj.weight with tensor torch.Size([1024, 1024]) is 0.1768817901611328
sparsity of layer decoder.layers.11.encoder_attn.q_proj.weight with tensor torch.Size([1024, 1024]) is 0.19231796264648438
sparsity of layer decoder.layers.11.encoder_attn.out_proj.weight with tensor torch.Size([1024, 1024]) is 0.1804513931274414
sparsity of layer decoder.layers.11.fc1.weight with tensor torch.Size([4096, 1024]) is 0.19327044486999512
sparsity of layer decoder.layers.11.fc2.weight with tensor torch.Size([1024, 4096]) is 0.169816255569458
Final sparsity level of 0.3: 0.30002753151986017
2023-08-29 20:56:40 | INFO | fairseq_cli.train | Start iterating over samples
2023-08-29 20:56:40 | INFO | fairseq_cli.train | begin validation on "valid" subset
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=40701.78515625Mb; avail=468734.40234375Mb
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler order indices time: 0:00:00.007558
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38931.1953125Mb; avail=470504.9921875Mb
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler filter_by_size time: 0:00:00.079825
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38932.5Mb; avail=470503.625Mb
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] @batch_sampler batch_by_size time: 0:00:00.112870
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | [valid] per epoch batch_sampler set-up time: 0:00:00.201112
2023-08-29 20:56:40 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=38933.71484375Mb; avail=470502.31640625Mb
2023-08-29 20:56:51 | INFO | valid | epoch 001 | valid on 'valid' subset | loss 37.524 | nll_loss 18.948 | ppl 505608 | wps 16467.1 | wpb 641.3 | bsz 34.8 | num_updates 0
saved best is 37.524
2023-08-29 20:56:51 | INFO | fairseq.checkpoint_utils | Preparing to save checkpoint for epoch 1 @ 0 updates
2023-08-29 20:56:51 | INFO | fairseq.trainer | Saving checkpoint to /gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/majority_pre_2to2/0.3/checkpoint_1_0.pt
2023-08-29 20:56:59 | INFO | fairseq.trainer | Finished saving checkpoint to /gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/majority_pre_2to2/0.3/checkpoint_1_0.pt
2023-08-29 20:57:05 | INFO | fairseq.checkpoint_utils | Saved checkpoint majority_pre_2to2/0.3/checkpoint_1_0.pt (epoch 1 @ 0 updates, score 37.524) (writing took 14.56166690774262 seconds)
2023-08-29 20:57:05 | INFO | fairseq_cli.train | end of epoch 1 (average epoch stats below)
2023-08-29 20:57:05 | INFO | train | epoch 001 | lr 0 | wall 111
should_stop=should_stop=should_stop=should_stop True
2023-08-29 20:57:05 | INFO | fairseq_cli.train | done training in 101.9 seconds
*** Sparsity for majority_pre_2to2/0.3//checkpoint_last.pt = 30.3073%
2023-08-29 20:57:14 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 20:57:16 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'majority_pre_2to2/0.3//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='majority_pre_2to2/0.3//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='en', suppress_crashes=False, target_dict=None, target_lang='ru', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 20:57:16 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 20:57:17 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 20:57:17 | INFO | fairseq.data.multilingual.multilingual_data_manager | [ru] dictionary: 250026 types
2023-08-29 20:57:17 | INFO | fairseq_cli.generate | loading model(s) from majority_pre_2to2/0.3//checkpoint_last.pt
2023-08-29 20:57:46 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 20:57:46 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36392.90234375Mb; avail=472993.99609375Mb
2023-08-29 20:57:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 20:57:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:en-ru': 1}
2023-08-29 20:57:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-ru src_langtok: 250002; tgt_langtok: 250003
2023-08-29 20:57:46 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-ru.en
2023-08-29 20:57:46 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-ru.ru
2023-08-29 20:57:46 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test en-ru 2000 examples
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36184.93359375Mb; avail=473191.96484375Mb
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.001730
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36184.93359375Mb; avail=473191.96484375Mb
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.049092
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36184.93359375Mb; avail=473191.96484375Mb
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.037362
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.089741
2023-08-29 20:57:50 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36184.93359375Mb; avail=473191.96484375Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:07:25 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:07:25 | INFO | fairseq_cli.generate | Translated 2,000 sentences (210,707 tokens) in 557.4s (3.59 sentences/s, 378.01 tokens/s)
2023-08-29 21:07:28 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:07:32 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'majority_pre_2to2/0.3//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='majority_pre_2to2/0.3//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='ru', suppress_crashes=False, target_dict=None, target_lang='en', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:07:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:07:33 | INFO | fairseq.data.multilingual.multilingual_data_manager | [ru] dictionary: 250026 types
2023-08-29 21:07:33 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:07:33 | INFO | fairseq_cli.generate | loading model(s) from majority_pre_2to2/0.3//checkpoint_last.pt
2023-08-29 21:08:06 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:08:06 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36815.51953125Mb; avail=472589.515625Mb
2023-08-29 21:08:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:08:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:ru-en': 1}
2023-08-29 21:08:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:ru-en src_langtok: 250003; tgt_langtok: 250002
2023-08-29 21:08:06 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-ru.ru
2023-08-29 21:08:06 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-ru.en
2023-08-29 21:08:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test ru-en 2000 examples
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=37457.2890625Mb; avail=471937.73046875Mb
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.001372
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=37457.2890625Mb; avail=471937.73046875Mb
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.027311
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=37467.31640625Mb; avail=471927.703125Mb
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.036007
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.065689
2023-08-29 21:08:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=37489.37109375Mb; avail=471905.6484375Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:17:58 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:17:58 | INFO | fairseq_cli.generate | Translated 2,000 sentences (217,784 tokens) in 570.5s (3.51 sentences/s, 381.77 tokens/s)
2023-08-29 21:18:02 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:18:05 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'majority_pre_2to2/0.3//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='majority_pre_2to2/0.3//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='en', suppress_crashes=False, target_dict=None, target_lang='vi', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:18:05 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:18:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:18:07 | INFO | fairseq.data.multilingual.multilingual_data_manager | [vi] dictionary: 250026 types
2023-08-29 21:18:07 | INFO | fairseq_cli.generate | loading model(s) from majority_pre_2to2/0.3//checkpoint_last.pt
2023-08-29 21:18:38 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:18:38 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=30957.234375Mb; avail=478447.7265625Mb
2023-08-29 21:18:38 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:18:38 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:en-vi': 1}
2023-08-29 21:18:38 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:en-vi src_langtok: 250002; tgt_langtok: 250004
2023-08-29 21:18:38 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-vi.en
2023-08-29 21:18:38 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-vi.vi
2023-08-29 21:18:38 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test en-vi 2000 examples
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=32971.13671875Mb; avail=476423.80078125Mb
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.001971
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=32975.1640625Mb; avail=476419.7734375Mb
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.040079
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=33067.328125Mb; avail=476327.609375Mb
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.028250
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.071740
2023-08-29 21:18:43 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=33143.4921875Mb; avail=476249.4453125Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:28:25 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:28:25 | INFO | fairseq_cli.generate | Translated 2,000 sentences (248,476 tokens) in 568.1s (3.52 sentences/s, 437.36 tokens/s)
2023-08-29 21:28:29 | INFO | fairseq.tasks.text_to_speech | Please install tensorboardX: pip install tensorboardX
2023-08-29 21:28:32 | INFO | fairseq_cli.generate | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': None, 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': 'majority_pre_2to2/0.3//checkpoint_last.pt', 'post_process': 'sentencepiece', 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 1, 'distributed_num_procs': 1, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': None, 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'pytorch_ddp', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 1, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 1, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': None, 'batch_size': 32, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': None, 'batch_size_valid': 32, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 0, 'stop_time_hours': 0.0, 'clip_norm': 0.0, 'sentence_avg': False, 'update_freq': [1], 'lr': [0.25], 'stop_min_lr': -1.0, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoint_last.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': -1, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'loss', 'maximize_best_checkpoint_metric': False, 'patience': -1, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 1}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': True, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': {'_name': 'wav2vec2', 'extractor_mode': 'default', 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_type': 'transformer', 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.0, 'dropout_input': 0.0, 'dropout_features': 0.0, 'final_dim': 0, 'layer_norm_first': False, 'conv_feature_layers': '[(512, 10, 5)] + [(512, 3, 2)] * 4 + [(512,2,2)] + [(512,2,2)]', 'conv_bias': False, 'logit_temp': 0.1, 'quantize_targets': False, 'quantize_input': False, 'same_quantizer': False, 'target_glu': False, 'feature_grad_mult': 1.0, 'quantizer_depth': 1, 'quantizer_factor': 3, 'latent_vars': 320, 'latent_groups': 2, 'latent_dim': 0, 'mask_length': 10, 'mask_prob': 0.65, 'mask_selection': 'static', 'mask_other': 0.0, 'no_mask_overlap': False, 'mask_min_space': 1, 'require_same_masks': True, 'mask_dropout': 0.0, 'mask_channel_length': 10, 'mask_channel_prob': 0.0, 'mask_channel_before': False, 'mask_channel_selection': 'static', 'mask_channel_other': 0.0, 'no_mask_channel_overlap': False, 'mask_channel_min_space': 1, 'num_negatives': 100, 'negatives_from_everywhere': False, 'cross_sample_negatives': 0, 'codebook_negatives': 0, 'conv_pos': 128, 'conv_pos_groups': 16, 'pos_conv_depth': 1, 'latent_temp': [2.0, 0.5, 0.999995], 'max_positions': 100000, 'checkpoint_activations': False, 'required_seq_len_multiple': 1, 'crop_seq_to_multiple': 1, 'depthwise_conv_kernel_size': 31, 'attn_type': '', 'pos_enc_type': 'abs', 'fp16': False}, 'task': Namespace(_name='translation_multi_simple_epoch', aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='wav2vec2', azureml_logging=False, batch_size=32, batch_size_valid=32, beam=5, best_checkpoint_metric='loss', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_shard_count=1, checkpoint_suffix='', combine_valid_subsets=None, constraints=None, continue_once=None, cpu=False, cpu_offload=False, criterion='cross_entropy', curriculum=0, data='examples/multilingual/multidata', data_buffer_size=10, dataset_impl=None, ddp_backend='pytorch_ddp', ddp_comm_hook='none', decoder_langtok=True, decoding_format=None, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=1, distributed_port=-1, distributed_rank=0, distributed_world_size=1, diverse_beam_groups=-1, diverse_beam_strength=0.5, diversity_rate=-1.0, empty_cache_freq=0, enable_lang_ids=False, enable_reservsed_directions_shared_datasets=False, encoder_langtok='src', eos=2, eos_token=None, extra_data=None, extra_lang_pairs=None, fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_dictionary=None, fixed_validation_seed=None, force_anneal=None, fp16=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_unused_valid_subsets=False, iter_decode_eos_penalty=0.0, iter_decode_force_max_iter=False, iter_decode_max_iter=10, iter_decode_with_beam=1, iter_decode_with_external_reranker=False, keep_best_checkpoints=-1, keep_inference_langtok=False, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=-1, lang_dict='examples/multilingual/lang_list.txt', lang_pairs='en-ru,en-vi,vi-en,ru-en', lang_tok_replacing_bos_eos=False, lang_tok_style='multilingual', langs=None, langtoks=None, langtoks_specs=['main'], left_pad_source='True', left_pad_target='False', lenpen=1, lm_path=None, lm_weight=0.0, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr_scheduler='fixed', lr_shrink=0.1, match_source_len=False, max_len_a=0, max_len_b=200, max_source_positions=1024, max_target_positions=1024, max_tokens=None, max_tokens_valid=None, max_valid_steps=None, maximize_best_checkpoint_metric=False, memory_efficient_bf16=False, memory_efficient_fp16=False, min_len=1, min_loss_scale=0.0001, model_overrides='{}', model_parallel_size=1, nbest=1, no_beamable_mm=False, no_early_stop=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_repeat_ngram_size=0, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_seed_provided=False, not_fsdp_flatten_parameters=False, nprocs_per_node=1, num_shards=1, num_workers=1, on_cpu_convert_precision=False, optimizer=None, optimizer_overrides='{}', pad=1, path='majority_pre_2to2/0.3//checkpoint_last.pt', patience=-1, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', post_process='sentencepiece', prefix_size=0, print_alignment=None, print_step=False, profile=False, quantization_config_path=None, quiet=False, replace_unk=None, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoint_last.pt', results_path=None, retain_dropout=False, retain_dropout_modules=None, retain_iter_history=False, sacrebleu=True, sampling=False, sampling_method='concat', sampling_temperature=1.5, sampling_topk=-1, sampling_topp=-1.0, sampling_weights=None, sampling_weights_from_file=None, save_dir='checkpoints', save_interval=1, save_interval_updates=0, score_reference=False, scoring='bleu', seed=1, shard_id=0, skip_invalid_size_inputs_valid_test=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_dict=None, source_lang='vi', suppress_crashes=False, target_dict=None, target_lang='en', task='translation_multi_simple_epoch', temperature=1.0, tensorboard_logdir=None, threshold_loss_scale=None, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, unkpen=0, unnormalized=False, update_epoch_batch_itr=False, update_ordered_indices_seed=False, upsample_primary=1, use_plasma_view=False, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, virtual_data_size=None, virtual_epoch_size=None, wandb_project=None, warmup_updates=0, write_checkpoints_asynchronously=False, zero_sharding='none'), 'criterion': {'_name': 'cross_entropy', 'sentence_avg': True}, 'optimizer': None, 'lr_scheduler': {'_name': 'fixed', 'force_anneal': None, 'lr_shrink': 0.1, 'warmup_updates': 0, 'lr': [0.25]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}, 'spa': {'_name': None, 'imp_iters': 1, 'update_frequency': 1500, 'sparse': False, 'noembed': False, 'fix': False, 'growth': None, 'prune': None, 'initialization_checkpoint': None, 'sparse_init': None, 'redistribution': None, 'sparsity': 0.5, 'prune_rate': 0.5, 'sparse_mode': 'fix', 'final_prune_time': 0.8, 'initial_prune_time': 0.1}}
2023-08-29 21:28:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | loaded language list from examples/multilingual/lang_list.txt as they are ordered in file
2023-08-29 21:28:32 | INFO | fairseq.data.multilingual.multilingual_data_manager | [vi] dictionary: 250026 types
2023-08-29 21:28:33 | INFO | fairseq.data.multilingual.multilingual_data_manager | [en] dictionary: 250026 types
2023-08-29 21:28:33 | INFO | fairseq_cli.generate | loading model(s) from majority_pre_2to2/0.3//checkpoint_last.pt
2023-08-29 21:29:06 | INFO | fairseq.tasks.translation_multi_simple_epoch | loading data for test epoch=1/None
2023-08-29 21:29:06 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36447.33984375Mb; avail=472932.51953125Mb
2023-08-29 21:29:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | langtoks settings: {'main': ('src', 'tgt')}
2023-08-29 21:29:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | [test] num of shards: {'main:vi-en': 1}
2023-08-29 21:29:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | main:vi-en src_langtok: 250004; tgt_langtok: 250002
2023-08-29 21:29:06 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-vi.vi
2023-08-29 21:29:06 | INFO | fairseq.data.data_utils | loaded 2,000 examples from: examples/multilingual/multidata/test.en-vi.en
2023-08-29 21:29:06 | INFO | fairseq.data.multilingual.multilingual_data_manager | examples/multilingual/multidata test vi-en 2000 examples
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | start batch sampler: mem usage: used=36234.09375Mb; avail=473135.7421875Mb
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler order indices time: 0:00:00.000885
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36234.09375Mb; avail=473135.7421875Mb
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler filter_by_size time: 0:00:00.018361
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36235.52734375Mb; avail=473134.30859375Mb
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] @batch_sampler batch_by_size time: 0:00:00.016064
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | [test] per epoch batch_sampler set-up time: 0:00:00.035943
2023-08-29 21:29:10 | INFO | fairseq.tasks.translation_multi_simple_epoch | mem usage: used=36235.52734375Mb; avail=473134.30859375Mb
/gpfs/work2/0/einf3822/Lu/Multilingual_translation-main/fairseq/modules/multihead_attention.py:846: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  // self.beam_size,
2023-08-29 21:39:15 | INFO | fairseq_cli.generate | NOTE: hypothesis and token scores are output in base 2
2023-08-29 21:39:15 | INFO | fairseq_cli.generate | Translated 2,000 sentences (244,720 tokens) in 590.8s (3.39 sentences/s, 414.25 tokens/s)

JOB STATISTICS
==============
Job ID: 3570040
Cluster: snellius
User/Group: xiaoq/xiaoq
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 18
CPU Utilized: 00:47:23
CPU Efficiency: 5.86% of 13:29:06 core-walltime
Job Wall-clock time: 00:44:57
Memory Utilized: 21.12 GB
Memory Efficiency: 17.60% of 120.00 GB
